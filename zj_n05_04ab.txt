Name: Jiawei Zhang
Date: 2/10/2023

Homework 6a & 6b

Introduction: 

Comparsion between all methods of integration is important for verification of methods. Its important to know how integration works
at the fundamental level.


Method:

Using Visual Studio IDE and installing matplotlib,scipy, and pylab. These libraries are important in doing built in integration.


Code:

5.4A

from numpy import *
from math import *
from matplotlib import *
from scipy.integrate import *
from scipy.special import *
from pylab import *
print("The diffraction limit of a telescope")

a=float(input("From:"))
b=float(input("To:"))
m=int(input("M:"))
y1=int(input("y1:"))
y2=int(input("y2:"))
#allows user to customize the definite integral
if a>b:
    print("The integral will be negative")
N=int(input("Number of Slices:"))
#user inputs the slices
h=(b-a)/N
y=(y2-y1)/N
def f(x,y):
    return cos(m*x-y*sin(x))
#defines the function
inte=0
for k in range(1,N):
    inte+=f(a+h/2+k*h,y1+h/2+k*h)*h
#the coding equivalent to the sum function for the riemman sum using a for loop to iterate
xlist=linspace(-100,100,num=100)
xlist=arange(-10,10,.1)

ylist=f(xlist,y)
figure(num=0,dpi=120)
plot(xlist,ylist)
show()
print("The Diffraction Limit is:",inte*1/pi)



print("With Simpson's Rule")
#whole function with simpson's rule is calculated here
def j(m,x):

    def f(thet):
        return cos(m*thet-x*sin(thet))

    inte2=f(a)+f(b)+4*f(b-h)

    for k in range(1,N//2):
        inte2+=4*f(a+(2*k-1)*h)+2*f(a+2*k*h)
#loops to the endpoint
    intewh=h/3*inte2/pi

    return intewh

xlist2=linspace(0,30)

plot(xlist2,j(0,xlist2),label='J0')
plot(xlist2,j(1,xlist2),label='J1')
plot(xlist2,j(2,xlist2),label='J2')
show()
#parameters to make the graph
print("With integration Function")
#with sci.py integration function
fulinteg=dblquad(f,a,b,y1,y2)

print(fulinteg)

print("With Bessel Function")
#bessel function 
zetalist=linspace(a,b,N)
for t in range(1,N//2):
    plot(zetalist,jv(t,zetalist))

show()





5.4b

from numpy import *
from matplotlib.pyplot import *
from scipy import integrate

print("Density Plot Creator")

lamb=int(input("Wavelength:"))
k=(2*pi)/lamb
length=int(input("Length:"))
slices=int(input("Slices:"))
x=linspace(-length,length,slices)
y=x
x,y=meshgrid(x,y)
cirRad=sqrt(x**2+y**2)
points=zeros([slices,slices])

j1=lambda t: cos(t-(m)*sin(t))

for j in range(len(y)):
    for i in range(len(x)):

        rad=cirRad[i,j]
        m=rad*k
        inteNum=(1/pi)*integrate.quad(j1,0,pi)[0]
        inteNum=(inteNum/m)**2
        points[i,j]=inteNum

figure(figsize=(6,6))
title("Telescope Diffraction Pattern")
imshow(points,origin='lower',vmax=0.01,extent=(-1000,1000,-1000,1000))
show()



Verification:

As with integration methods, the four methods are checked by hand. Some show inconsistencies that are caused by user input.




Data:
5.4A

The diffraction limit of a telescope
From:0
To:3.14
M:1
y1:0
y2:20
Number of Slices:1000
The Diffraction Limit is: 0.6966068522428036
With Simpson's Rule
With integration Function
(27.62556733805837, 1.0783454268410382e-07)
With Bessel Function


5.4B

Density Plot Creator
Wavelength:500
Length:500
Slices:100





Analysis:

Both programs performed well, at least in the way they ran. However, some values are off and are not consistent with each other. This is due
to the values coming from the same source, that is the user imput. The graphs produced by the Riemann method is a close up of the bessel 
function at a certain function, while the one produced by the bessel, simpson, and integration function shows the full function. While the
diffraction display a 2D graph with a central bright spot and fringes that radiate from the center, this is a simulation of light diffraction.





Critque:

Analyse and rewrite the program to display accurate results. The problem may lie in how the functions work in respect to each other.


Time log: 2hr 10mins spent on assignment
